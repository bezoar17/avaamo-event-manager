"""
Autogenerated input type of AddUsersToEvent
"""
input AddUsersToEventInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event_id: ID!
  ids: [ID!]!
}

"""
Autogenerated return type of AddUsersToEvent
"""
type AddUsersToEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  success: Boolean!
}

"""
Availability array for a User
"""
type Availability {
  available: Boolean!
  end_time: DateTime!
  start_time: DateTime!
}

"""
Autogenerated input type of CreateEvent
"""
input CreateEventInput {
  allday: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String
  endtime: DateTime
  starttime: DateTime!
  title: String
}

"""
Autogenerated return type of CreateEvent
"""
type CreateEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event: Event!
}

"""
Autogenerated input type of CreateUser
"""
input CreateUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  phone: String!
  username: String!
}

"""
Autogenerated return type of CreateUser
"""
type CreateUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

"""
DateTime type
"""
scalar DateTime

"""
Event Entity
"""
type Event {
  allday: Boolean!
  description: String
  endtime: DateTime!
  event_users: [EventUser!]
  id: ID!
  invitees: [User!]
  rsvps: [EventUser!]
  starttime: DateTime!
  title: String!
}

"""
Event User Entity
"""
type EventUser {
  event: Event!
  id: ID!
  role: String!
  rsvp: RsvpEnum!
  user: User!
}

"""
The mutation root for this schema
"""
type Mutation {
  add_users_to_event(input: AddUsersToEventInput!): AddUsersToEventPayload
  create_event(input: CreateEventInput!): CreateEventPayload
  create_user(input: CreateUserInput!): CreateUserPayload
  rsvp_to_event(input: RsvpToEventInput!): RsvpToEventPayload
}

"""
The query root of this schema
"""
type Query {
  event(id: ID!): Event
  events: [Event!]
  user(id: ID!): User
  users: [User!]
}

"""
Rsvp values for Event User
"""
enum RsvpEnum {
  maybe
  no
  yes
}

"""
Autogenerated input type of RsvpToEvent
"""
input RsvpToEventInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event_id: ID!
  rsvp: RsvpEnum!
}

"""
Autogenerated return type of RsvpToEvent
"""
type RsvpToEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  success: Boolean!
}

"""
User Entity
"""
type User {
  availability(end_date: DateTime!, slot_size: Int, start_date: DateTime!): [Availability!]!
  email: String!
  event_users: [EventUser!]
  events(end_date: DateTime, start_date: DateTime): [Event!]
  id: ID!
  phone: String!
  username: String!
}